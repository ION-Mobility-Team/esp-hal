//! This shows some of the interrupts that can be generated by UART/Serial.
//! Use a proper serial terminal to connect to the board (espmonitor and
//! espflash won't work)

#![no_std]
#![no_main]

use core::{cell::RefCell, fmt::Write};
use heapless::String;

use critical_section::Mutex;
use esp32c6_hal::{
    clock::ClockControl,
    interrupt,
    peripherals::{self, Peripherals, UART0},
    prelude::*,
    riscv,
    timer::TimerGroup,
    uart::config::AtCmdConfig,
    Cpu, Uart,
};
use esp_backtrace as _;
use nb::block;

static SERIAL: Mutex<RefCell<Option<Uart<UART0>>>> = Mutex::new(RefCell::new(None));

#[entry]
fn main() -> ! {
    let peripherals = Peripherals::take();
    let system = peripherals.SYSTEM.split();
    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();

    let timer_group0 = TimerGroup::new(peripherals.TIMG0, &clocks);
    let mut timer0 = timer_group0.timer0;

    let mut uart0 = Uart::new(peripherals.UART0, &clocks);
    uart0.set_at_cmd(AtCmdConfig::new(None, None, None, b'\n', None));
    uart0.set_rx_fifo_full_threshold(30).unwrap();
    uart0.listen_at_cmd();
    uart0.listen_rx_fifo_full();

    timer0.start(1u64.secs());

    critical_section::with(|cs| SERIAL.borrow_ref_mut(cs).replace(uart0));

    interrupt::enable(
        peripherals::Interrupt::UART0,
        interrupt::Priority::Priority1,
    )
    .unwrap();
    interrupt::set_kind(
        Cpu::ProCpu,
        interrupt::CpuInterrupt::Interrupt1, // Interrupt 1 handles priority one interrupts
        interrupt::InterruptKind::Edge,
    );

    unsafe {
        riscv::interrupt::enable();
    }
    critical_section::with(|cs| {
        write!(SERIAL.borrow_ref_mut(cs).as_mut().unwrap(), "ESP32C6 > ").ok();
    });

    loop {
        block!(timer0.wait()).unwrap();
    }
}

#[interrupt]
fn UART0() {
    let mut cmd: String<255> = String::from("");
    critical_section::with(|cs| {
        let mut serial = SERIAL.borrow_ref_mut(cs);
        let serial = serial.as_mut().unwrap();

        let mut cnt = 0;
        while let nb::Result::Ok(_c) = serial.read() {
            cnt += 1;
            if _c == 0x8 {
                cmd.pop();
            } else if _c != b'\n' {
                cmd.push(_c as char);
            }
        }

        match cmd.as_str() {
            "help" => {
                writeln!(serial, "\nCommands:\n    command1\n    command2\n    command3\n    command4\n    command5\n").ok();
            }
            "command1" => {
                writeln!(serial, "run command1\n").ok();
            }
            "command2" => {
                writeln!(serial, "run command2\n").ok();
            }
            "command3" => {
                writeln!(serial, "run command3\n").ok();
            }
            "command4" => {
                writeln!(serial, "run command4\n").ok();
            }
            "command5" => {
                writeln!(serial, "run command5\n").ok();
            }
            _ => {
                if !cmd.is_empty() {
                    writeln!(serial, "Unknown command\n").ok();
                }
            }
        }

        serial.reset_at_cmd_interrupt();
        serial.reset_rx_fifo_full_interrupt();

        write!(serial, "ESP32C6 > ").ok();
    });
}
